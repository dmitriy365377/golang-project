package main

import (
	"log"
	"strings"

	"golang-chat/internal/rest-auth/database"
	"golang-chat/internal/rest-auth/handler"
	authmiddleware "golang-chat/internal/rest-auth/middleware"
	"golang-chat/internal/rest-auth/model"
	"golang-chat/internal/rest-auth/repository"
	"golang-chat/internal/rest-auth/service"
	"golang-chat/internal/rest-auth/validation"
	"golang-chat/pkg/config"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/requestid"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GORM
	db, err := database.ConnectToPostgres(cfg.DatabaseURL)
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}
	defer database.CloseDatabase(db)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü
	if err := db.AutoMigrate(&model.User{}); err != nil {
		log.Printf("‚ö†Ô∏è Warning: Database migration failed: %v", err)
		log.Println("üîÑ Continuing without migration...")
	} else {
		log.Println("‚úÖ Database migration completed successfully")
	}

	// –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
	validator := validation.NewCustomValidator()

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å GORM
	userRepository := repository.NewGormUserRepository(db)

	// –°–æ–∑–¥–∞–µ–º Auth Service
	authService := service.NewAuthService(cfg, userRepository)

	// –°–æ–∑–¥–∞–µ–º Auth Handler
	authHandler := handler.NewAuthHandler(authService, validator)

	// –°–æ–∑–¥–∞–µ–º Fiber –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := fiber.New(fiber.Config{
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			return c.Status(code).JSON(fiber.Map{
				"error": err.Error(),
			})
		},
	})

	// CORS middleware - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
	app.Use(cors.New(cors.Config{
		AllowOrigins:     strings.Join(cfg.CORSOrigins, ","), // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É
		AllowMethods:     strings.Join(cfg.CORSMethods, ","),
		AllowHeaders:     strings.Join(cfg.CORSHeaders, ","),
		ExposeHeaders:    "Link",
		AllowCredentials: true,
		MaxAge:           300, // 5 –º–∏–Ω—É—Ç
	}))

	// Middleware
	app.Use(logger.New())    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
	app.Use(recover.New())   // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ panic
	app.Use(requestid.New()) // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
	app.Get("/health", healthCheckHandler)

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
	app.Get("/", rootHandler)

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	auth := app.Group("/api/auth")
	auth.Post("/register", authHandler.Register)
	auth.Post("/login", authHandler.Login)
	auth.Post("/refresh", authHandler.RefreshToken)

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã - —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	protected := auth.Group("/", authmiddleware.AuthMiddleware(authService))
	protected.Get("/profile", authHandler.GetProfile)
	protected.Post("/logout", authHandler.Logout)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	log.Println("REST Auth Service starting on :8080")
	log.Fatal(app.Listen(":8080"))
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
func healthCheckHandler(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{
		"status":  "ok",
		"service": "auth-service",
		"router":  "fiber",
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
func rootHandler(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{
		"message": "Golang Chat Auth Service",
		"version": "1.0.0",
		"router":  "fiber",
	})
}
